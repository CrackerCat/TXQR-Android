THIS IS WASTE CODE THAT I MAY WANT, DO NOT DELTETE FROM THIS FILE

// Future<List<dynamic>> _getMessage(String msg) async {
  //   List<dynamic> message;
  //   try {
  //     final List<dynamic> result = await platform.invokeMethod('decodeMessage', msg);
  //     message = result;
  //   } on PlatformException catch (e) {
  //     message = ['Failed to retrieve message ${e.message}', -1.0];
  //   }

  //   setState(() {
  //     _message = message;
  //   });

  //   return _message;
  // }

  // Future<void> _scanQR(BuildContext myContext) async {
  //   try {
  //     while ((await _getMessage(await BarcodeScanner.scan()))[0] == _notDone) {
  //       //show snackbar
  //       Scaffold.of(myContext).showSnackBar(
  //         SnackBar(content: Text("?")),
  //       );
  //     }

  //     setState(() async {
  //       result = _message[0] as String;
  //     });
  //   } on PlatformException catch (ex) {
  //     if (ex.code == BarcodeScanner.CameraAccessDenied) {
  //       setState(() {
  //         result = "Camera permission was denied";
  //       });
  //     } else {
  //       setState(() {
  //         result = "Unknown Error $ex";
  //       });
  //     }
  //   } on FormatException {
  //     setState(() {
  //       result = "You pressed the back button before scanning anything";
  //     });
  //   } catch (ex) {
  //     setState(() {
  //       result = "Unknown Error $ex";
  //     });
  //   }
  // }






  // Expanded(
                  //   child: ListView.builder(
                  //     shrinkWrap: false,
                  //     itemCount: items.length,
                  //     itemBuilder: (context, i) => Padding(
                  //           padding: const EdgeInsets.symmetric(horizontal: 10.0),
                  //           child: ListTile(
                  //               title: Text(
                  //                 items[i],
                  //               ),
                  //               leading: whichIcon(items[i]),
                  //               onTap: () {
                  //                 if (items[i] == "Share") {
                  //                   Share.share(result);
                  //                 } else {
                  //                   _scan();
                  //                 }
                  //               }),
                  //         ),
                  //   ),
                  // ),
                  //about tile?



                    // Widget whichIcon(String item) {
  //   if (item == "Share") {
  //     return Icon(Icons.share);
  //   } else {
  //     return Icon(Icons.camera_alt);
  //   }
  // }



// Widget txDefaultAppBar() => AppBar(
  //       title: Text("QR Scanner"),
  //       actions: <Widget>[
  //         IconButton(
  //           icon: Icon(Icons.share),
  //           tooltip: 'Search',
  //           onPressed: () {
  //             Share.share(result);
  //           },
  //         ),
  //       ],
  //     );




  // IconButton(
                  //   icon: Icon(Icons.share),
                  //   color: Colors.blueGrey[600],
                  //   tooltip: 'Share',
                  //   onPressed: () {
                  //     Share.share(result);
                  //   },
                  // ),
                  // IconButton(
                  //   icon: Icon(Icons.file_upload),
                  //   color: Colors.green[300],
                  //   tooltip: 'test',
                  //   onPressed: () {
                  //     _showModalBottomSheet(context);
                  //     //_getMessage("oza");
                  //   },
                  // ),


                  
  // SliverList(
  //       delegate: SliverChildListDelegate([
  //         SizedBox(
  //           height: 60,
  //           width: 120,
  //           child: 
  //         ),
  //         SizedBox(
  //           height: 60,
  //           width: 120,
  //           child: IconButton(
  //             icon: Icon(Icons.remove),
  //             onPressed: () async {
  //               print(await TxQrData().allMessageEntries);
  //             },
  //           ),
  //         ),
  //         // ListView.builder(
  //         //   itemBuilder: (BuildContext context, int index) =>
  //         //       _makeElement(index),
  //         // ),
  //       ]),
  //     );