"""Implementation of a sampler for the Robust Soliton Distribution.

This is the distribution on the `degree` of blocks encoded in the
Luby Transform code. Blocks of data transmitted are generated by
sampling degree `d` from the Robust Soliton Distrubution, then
sampling `d` blocks uniformly from the sequence of blocks in the
file to be transmitted. These are XOR'ed together, and the result
is transmitted.

Critically, the state of the PRNG when the degree of a block was
sampled is transmitted with the block as metadata, so the
receiver can reconstruct the sampling of source blocks given the
same PRNG parameters below.

MIT License

Copyright (c) [2015] [Anson Rosenthal]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import sys
import io
import base64
import zlib
from random import randint
from struct import pack, unpack
from math import log, floor, sqrt, ceil
from collections import defaultdict
from random import choice
from java import constructor, method, Override, static_proxy, jarray, jboolean, jvoid, jdouble, jint, jbyte, jclass, jfloat
from java.lang import String, Thread
from java.io import FileNotFoundException, EOFException
from java.lang import Error, RuntimeException

LOGGER = jclass('maxpaulson.org.txqr_fincryptmessaging.logThePython')()

DEFAULT_C = 0.1
DEFAULT_DELTA = 0.5

# Parameters for Pseudorandom Number Generator
PRNG_A = 16807
PRNG_M = (1 << 31) - 1
PRNG_MAX_RAND = PRNG_M - 1


def gen_tau(s, k, delta):
    """The Robust part of the RSD, we precompute an
    array for speed
    """
    pivot = floor(k / s)
    return [s / k * 1 / d for d in range(1, pivot)] \
           + [s / k * log(s / delta)] \
           + [0 for d in range(pivot, k)]


def gen_rho(k):
    """The Ideal Soliton Distribution, we precompute
    an array for speed
    """
    return [1 / k] + [1 / (d * (d - 1)) for d in range(2, k + 1)]


def gen_mu(k, delta, c):
    """The Robust Soliton Distribution on the degree of
    transmitted blocks
    """

    S = c * log(k / delta) * sqrt(k)
    tau = gen_tau(S, k, delta)
    rho = gen_rho(k)
    normalizer = sum(rho) + sum(tau)
    return [(rho[d] + tau[d]) / normalizer for d in range(k)]


def gen_rsd_cdf(k, delta, c):
    """The CDF of the RSD on block degree, precomputed for
    sampling speed"""

    mu = gen_mu(k, delta, c)
    return [sum(mu[:d + 1]) for d in range(k)]


class PRNG(object):
    """A Pseudorandom Number Generator that yields samples
    from the set of source blocks using the RSD degree
    distribution described above.
    """

    def __init__(self, params):
        """Provide RSD parameters on construction
        """

        self.state = None  # Seed is set by interfacing code using set_seed
        K, delta, c = params
        self.K = K
        self.cdf = gen_rsd_cdf(K, delta, c)

    def _get_next(self):
        """Executes the next iteration of the PRNG
        evolution process, and returns the result
        """

        self.state = PRNG_A * self.state % PRNG_M
        return self.state

    def _sample_d(self):
        """Samples degree given the precomputed
        distributions above and the linear PRNG output
        """

        p = self._get_next() / PRNG_MAX_RAND
        for ix, v in enumerate(self.cdf):
            if v > p:
                return ix + 1
        return ix + 1

    def set_seed(self, seed):
        """Reset the state of the PRNG to the
        given seed
        """

        self.state = seed

    def get_src_blocks(self, seed=None):
        """Returns the indices of a set of `d` source blocks
        sampled from indices i = 1, ..., K-1 uniformly, where
        `d` is sampled from the RSD described above.
        """

        if seed:
            self.state = seed

        blockseed = self.state
        d = self._sample_d()
        have = 0
        nums = set()
        while have < d:
            num = self._get_next() % self.K
            if num not in nums:
                nums.add(num)
                have += 1
        return blockseed, d, nums


# Check node in graph
class CheckNode(object):

    def __init__(self, src_nodes, check):
        self.check = check
        self.src_nodes = src_nodes


class BlockGraph(object):
    """Graph on which we run Belief Propagation to resolve
    source node data
    """

    def __init__(self, num_blocks):
        self.checks = defaultdict(list)
        self.num_blocks = num_blocks
        self.eliminated = {}

    def add_block(self, nodes, data):
        """Adds a new check node and edges between that node and all
        source nodes it connects, resolving all message passes that
        become possible as a result.
        """

        # We can eliminate this source node
        if len(nodes) == 1:
            to_eliminate = list(self.eliminate(next(iter(nodes)), data))

            # Recursively eliminate all nodes that can now be resolved
            while len(to_eliminate):
                other, check = to_eliminate.pop()
                to_eliminate.extend(self.eliminate(other, check))
        else:

            # Pass messages from already-resolved source nodes
            for node in list(nodes):
                if node in self.eliminated:
                    nodes.remove(node)
                    data ^= self.eliminated[node]

            # Resolve if we are left with a single non-resolved source node
            if len(nodes) == 1:
                return self.add_block(nodes, data)
            else:

                # Add edges for all remaining nodes to this check
                check = CheckNode(nodes, data)
                for node in nodes:
                    self.checks[node].append(check)

        # Are we done yet?
        return len(self.eliminated) / self.num_blocks, len(self.eliminated) >= self.num_blocks

    def eliminate(self, node, data):
        """Resolves a source node, passing the message to all associated checks
        """

        # Cache resolved value
        self.eliminated[node] = data
        others = self.checks[node]
        del self.checks[node]

        # Pass messages to all associated checks
        for check in others:
            check.check ^= data
            check.src_nodes.remove(node)

            # Yield all nodes that can now be resolved
            if len(check.src_nodes) == 1:
                yield (next(iter(check.src_nodes)), check.check)


class LTDecoder(static_proxy()):
    @constructor([])
    def __init__(self):
        self.c = DEFAULT_C
        self.delta = DEFAULT_DELTA
        self.K = 0
        self.filesize = 0
        self.blocksize = 0
        self.done = False
        self.compressed = False

        self.block_graph = None
        self.prng = None
        self.initialized = False

    @method(jboolean, [])
    def is_done(self):
        return self.done

    def consume_block(self, lt_block):
        (magic_byte, filesize, blocksize, blockseed), block = lt_block

        if magic_byte & 0x01:
            self.compressed = True

        # first time around, init things
        if not self.initialized:
            self.filesize = filesize
            self.blocksize = blocksize

            self.K = ceil(filesize / blocksize)
            self.block_graph = BlockGraph(self.K)
            self.prng = PRNG(params=(self.K, self.delta, self.c))
            self.initialized = True

        # Run PRNG with given seed to figure out which blocks were XORed to make received data
        _, _, src_blocks = self.prng.get_src_blocks(seed=blockseed)

        # If BP is done, stop
        progress, self.done = self._handle_block(src_blocks, block)
        return progress

    @method(jfloat, [String])
    def decode_bytes(self, block_bytes):
        block_bytes = base64.b64decode(block_bytes)
        header = unpack('!BIII', block_bytes[:13])
        data = int.from_bytes(block_bytes[13:], 'big')
        return self.consume_block((header, data))

    @method(String, [])
    def bytes_dump(self):
        buffer = io.BytesIO()
        self.stream_dump(buffer)
        raw_data = buffer.getvalue()
        if self.compressed:
            processed = zlib.decompress(raw_data)
        else:
            processed = raw_data
        return base64.b64encode(processed).decode('utf-8')

    def stream_dump(self, out_stream):
        # Iterate through blocks, stopping before padding junk
        for ix, block_bytes in enumerate(map(lambda p: int.to_bytes(p[1], self.blocksize, 'big'),
                                             sorted(self.block_graph.eliminated.items(), key=lambda p: p[0]))):
            if ix < self.K - 1 or self.filesize % self.blocksize == 0:
                out_stream.write(block_bytes)
            else:
                out_stream.write(block_bytes[:self.filesize % self.blocksize])

    def _handle_block(self, src_blocks, block):
        """What to do with new block: add check and pass
        messages in graph
        """
        return self.block_graph.add_block(src_blocks, block)
